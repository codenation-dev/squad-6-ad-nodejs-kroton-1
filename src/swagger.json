{
  "swagger": "2.0",
  "info": {
    "description": "Application to store logs from client applications. \n\nThis is a final project from AceleraDev Node.js in partner with Kroton.",
    "version": "1.0.0",
    "title": "Logs API"
  },
  "host": "localhost:3000",
  "tags": [
    {
      "name": "Logs",
      "description": "All the operations related to log."
    },
    {
      "name": "User",
      "description": "All the operations related to the user."
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/logs": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Add a new log.",
        "operationId": "saveLog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "log",
            "description": "Log object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Validation errors"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Get all Logs or based on some filter",
        "operationId": "getLogByFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "env",
            "type": "string",
            "description": "Filter by environment",
            "required": false
          },
          {
            "in": "query",
            "name": "sortBy",
            "type": "string",
            "description": "Sort by field",
            "required": false
          },
          {
            "in": "query",
            "name": "sortOrder",
            "type": "string",
            "description": "Sort order for  sortBy, default is DESC",
            "required": false
          },
          {
            "in": "query",
            "name": "queryBy",
            "type": "string",
            "description": "Search on field name",
            "required": false
          },
          {
            "in": "query",
            "name": "queryValue",
            "type": "string",
            "description": "Search this on field from queryBy",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Limit query results, default is 100",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "Offset value for query results, default is 0",
            "required": false
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResult"
            }
          },
          "400": {
            "description": "Something went wrong"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/logs/{id}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Return info about an specific Log",
        "produces": [
          "application/json"
        ],
        "operationId": "findLogById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "description": "Id of log to be returned",
            "required": true
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Something went wrong"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Cannot find with id especified"
          }
        }
      },
      "put": {
        "tags": [
          "Logs"
        ],
        "summary": "Archive an existing log",
        "operationId": "toArchive",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "description": "Log id that needs to be archived",
            "required": true
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Archived successfully"
          },
          "400": {
            "description": "Something went wrong"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Cannot archive, object not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Logs"
        ],
        "summary": "Delete a Log based on its id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Something went wrong"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Cannot drop, object not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "operationId": "store",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created sucessfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "This user already exists"
          },
          "500": {
            "description": "Creating user operation failed"
          }
        }
      }
    },
    "/session": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login user",
        "operationId": "sessionLogin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userInfo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginObject"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful login",
            "schema": {
              "$ref": "#/definitions/UserSession"
            }
          },
          "400": {
            "description": "Validation fails"
          },
          "401": {
            "description": "User or Password does not match"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login user reserved for third party APIs",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userInfo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginObject"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful login",
            "schema": {
              "$ref": "#/definitions/LoginSuccessful"
            }
          },
          "401": {
            "description": "User or Password does not match"
          },
          "500": {
            "description": "Login operation failed"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "id from the user"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Geting user operation failed"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "description": "The id of the user to update",
            "required": true
          },
          {
            "in": "body",
            "name": "userObject",
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User updated sucessfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Updating user operation failed"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "description": "The id of the user to be deleted",
            "required": true
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted sucessfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Deleting user operation failed"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Log": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "user_token": {
          "type": "string"
        },
        "events_number": {
          "type": "integer",
          "format": "int32"
        },
        "level": {
          "type": "string",
          "enum": [
            "INFO",
            "DEBUG",
            "WARNING",
            "ERROR",
            "CRITICAL_ERROR"
          ]
        },
        "environment": {
          "type": "string",
          "enum": [
            "PRODUCAO",
            "HOMOLOGACAO",
            "DEV"
          ]
        },
        "source": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "toArchive": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Log"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "LoginObject": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginSuccessful": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "SearchResult": {
      "type": "object",
      "properties": {
        "meta": {
          "type": "object",
          "properties": {
            "next": {
              "type": "string"
            },
            "previous": {
              "type": "string"
            },
            "total": {
              "type": "integer"
            }
          }
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Log"
          }
        }
      }
    }
  }
}